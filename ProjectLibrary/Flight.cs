using System;
using System.Threading;

namespace ProjectLibrary
{
    /// <summary>
    /// Represent a single flight, either landing or departure, generated by the simulator.
    /// </summary>
    public class Flight : IFlight
    {
        /// <summary>
        /// A thread in witch the flight make all the requests to the dispatcher.
        /// </summary>
        private Thread _flightThread;
        private bool _stopFligt = false;
        private Simulator simulator = Simulator.Instance;
        private StationsManager stationsManager = StationsManager.Instance;
        private Dispatcher dispatcher = Dispatcher.Instance;

        public StateType FlightStateType { get; set; }
        public string Id { get; set; }
        public Station CurrentStation { get; set; }

        public Flight(string flightId, StateType flightStateType)
        {
            Id = flightId;
            FlightStateType = flightStateType;
        }

        public void InitialteFlight()
        {
            _flightThread = new Thread(FlightInitiated);
            _flightThread.IsBackground = true;
            _flightThread.Start();

        }

        /// <summary>
        /// Checks if the current station that the plain is on is the last station. if this is the last station than the flight is over.
        /// </summary>
        /// <param name="currentStation">The current station that the flight is on</param>
        public bool CheckForLastStation(Station currentStation, StateType flightState)
        {
            if (currentStation == null)
                return false;

            if (flightState == StateType.Landing && currentStation.IsLandingLastStation)
                return true;
            if (flightState == StateType.Departure && currentStation.IsDepartureLastStation)
                return true;

            return false;
        }

        /// <summary>
        /// This method update the StationsManager that the current station occupied by this flight is free.
        /// </summary>
        /// <param name="currentStation">The current station that should be updated</param>
        public void FreeCurrentStation()
        {
            CurrentStation.IsOccupied = false;
            CurrentStation.CurrentFlightId = null;

            stationsManager.UpdateStation(CurrentStation);
            UpdateMessages($"Station number {CurrentStation.Id} is free");
            CurrentStation = null;
        }

        /// <summary>
        /// Updates the console window and the simulator message property with a message.
        /// </summary>
        /// <param name="message">Message to update</param>
        private void UpdateMessages(string message)
        {
            Console.WriteLine($"{message}\n");
            simulator.SimulationMessages += $"{message}\n";
        }

        /// <summary>
        /// This method updates the CurrentStation property if the next station is is free 
        /// </summary>
        /// <param name="nextStation">The next station that should be set in the CurrentStation property</param>
        public void MoveToNextStation(Station nextStation)
        {
            UpdateMessages($"Flight {Id} moved to station number {nextStation.Id}.");
            stationsManager.UpdateStation(nextStation);
        }

        /// <summary>
        /// Request the next avilable station from the dispatcher. This mehtod should update the CurrentStation property
        /// if the next station is avilable. if not, it should not update the CurrentStation property.
        /// </summary>
        /// <param name="flight">The current flight</param>
        public Station RequestNextStation(Flight flight)
        {
            UpdateMessages($"Flight {Id} Request Next Station");
            var station = dispatcher.GetNextStation(this);

            if (station != null)
            {
                station.IsOccupied = true;
                station.CurrentFlightId = flight.Id;
            }

            return station;
        }

        /// <summary>
        /// Randomly set the time that the should wait at the current station and make a call to the dispatcher
        /// </summary>
        public void SetWaitingTimeAtTheStation()
        {
            Random random = new Random();
            Thread.Sleep(Configuration.FlightsMovementSpeed * random.Next(4, 10));
        }

        /// <summary>
        /// This method aggrigate all the flight functionallity. It is the control flow of the Flight class.
        /// This method is raised when ever the WaitingTimer variable is Elapsed
        /// </summary>
        public void FlightInitiated()
        {
            while (true)
            {
                if (_stopFligt)
                    break;

                if (CheckForLastStation(CurrentStation, FlightStateType))
                {
                    UpdateMessages($"Flight {Id} arrived to its destiny.");
                    FreeCurrentStation();
                    simulator.RemoveFlight(this);
                    break;
                }

                Station requestedStation = RequestNextStation(this);

                if (requestedStation == null)
                {
                    SetWaitingTimeAtTheStation();
                    continue;
                }

                if (CurrentStation != null)
                    FreeCurrentStation();

                MoveToNextStation(requestedStation);
                CurrentStation = requestedStation;
                SetWaitingTimeAtTheStation();
            }
        }

        public void StopFlight() => _stopFligt = true;
    }
}
